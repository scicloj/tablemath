[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tablemath",
    "section": "",
    "text": "1 Preface\nMath and stats modelling with table ergonomics",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#what-is-this-about",
    "href": "index.html#what-is-this-about",
    "title": "Tablemath",
    "section": "What is this about?",
    "text": "What is this about?\nThis project is an initial attempt to create a Clojure library for math and statistics which is friendly to tech.ml.dataset and Tablecloth datasets and uses the functionality of Fastmath. It is also intended to compose well with Tableplot layered plotting. It is highly inspired by R and its packages.\nIn a way, it is intended to be a user-friendly compatiblity layer across these libraries.\nPossibly, after the details clarify, it will be merged into one of the other Scicloj libraries.\nComments and ideas would help!",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#general-info",
    "href": "index.html#general-info",
    "title": "Tablemath",
    "section": "General info",
    "text": "General info\n\n\n\nWebsite\nhttps://scicloj.github.io/tablemath/\n\n\nSource\n\n\n\nDeps\n\n\n\nLicense\nEPLv1.0\n\n\nStatus\nðŸ› experimentalðŸ› \n\n\nDev chat\n#tableplot-dev at Clojurians Zulip\n\n\nUser chat\n#data-science at Clojurians Zulip",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Tablemath",
    "section": "License",
    "text": "License\nCopyright Â© 2024 Scicloj\nEPLv1.0 is just the default for projects generated by clj-new: you are not required to open source this project, nor are you required to use EPLv1.0! Feel free to remove or change the LICENSE file and remove or update this section of the README.md file!\nDistributed under the Eclipse Public License version 1.0.",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#chapters-in-this-book",
    "href": "index.html#chapters-in-this-book",
    "title": "Tablemath",
    "section": "Chapters in this book",
    "text": "Chapters in this book\n\nAPI reference",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#a-little-example",
    "href": "index.html#a-little-example",
    "title": "Tablemath",
    "section": "A little example",
    "text": "A little example\n\n(require '[scicloj.metamorph.ml.toydata.ggplot :as ggtoydata]\n         '[scicloj.tablemath.v1.api :as tm])\n\n\n(-&gt; ggtoydata/mpg\n    (tm/design [:hwy]\n               ['(tm/polynomial displ 2)\n                '(tm/one-hot cyl)])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |   :median |      :q3 |      :max |\n|-----------+-----------+-----------+----------+-----------|\n| -6.502952 | -2.199655 | -0.442628 | 1.731071 | 13.353114 |\n\nCoefficients:\n\n|     :name |  :estimate |  :stderr |  :t-value | :p-value |    :confidence-interval |\n|-----------+------------+----------+-----------+----------+-------------------------|\n| Intercept |  51.748906 | 2.691953 | 19.223552 |      0.0 |   [46.444619 57.053194] |\n|    :displ | -13.793419 | 1.632143 | -8.451108 |      0.0 | [-17.009432 -10.577406] |\n|   :displ2 |   1.414259 | 0.188842 |  7.489108 |      0.0 |      [1.04216 1.786358] |\n|    :cyl=6 |   1.349072 | 1.017946 |  1.325289 | 0.186402 |    [-0.656712 3.354856] |\n|    :cyl=8 |  -1.065045 | 1.614092 | -0.659841 | 0.510022 |      [-4.245489 2.1154] |\n|    :cyl=5 |    2.64552 | 1.748691 |  1.512857 | 0.131701 |    [-0.800141 6.091182] |\n\nF-statistic: 100.78409449422603 on degrees of freedom: {:residual 228, :model 5, :intercept 1}\np-value: 0.0\n\nR2: 0.68849074650116\nAdjusted R2: 0.6816594032226767\nResidual standard error: 3.35970986421829 on 228 degrees of freedom\nAIC: 1239.1329320273042\n\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "tablemath_book.reference.html",
    "href": "tablemath_book.reference.html",
    "title": "2Â  API reference",
    "section": "",
    "text": "Setup\nIn this notebook, we will use Tablecloth and Tableplot for code examples, alongside Tablemath.",
    "crumbs": [
      "<span class='chapter-number'>2</span>Â  <span class='chapter-title'>API reference</span>"
    ]
  },
  {
    "objectID": "tablemath_book.reference.html#setup",
    "href": "tablemath_book.reference.html#setup",
    "title": "2Â  API reference",
    "section": "",
    "text": "(ns tablemath-book.reference\n  (:require [scicloj.tablemath.v1.api :as tm]\n            [tablecloth.api :as tc]\n            [tablecloth.column.api :as tcc]\n            [scicloj.tableplot.v1.plotly :as plotly]\n            [tablemath-book.utils :as utils]))",
    "crumbs": [
      "<span class='chapter-number'>2</span>Â  <span class='chapter-title'>API reference</span>"
    ]
  },
  {
    "objectID": "tablemath_book.reference.html#reference",
    "href": "tablemath_book.reference.html#reference",
    "title": "2Â  API reference",
    "section": "Reference",
    "text": "Reference\n\npolynomial\n[column degree]\nGiven a column and an integer degree, return a vector of columns with all its powers up to that degree, named appropriately.\n\nExamples\n\n(-&gt; [1 2 3]\n    (tcc/column {:name :x})\n    (tm/polynomial 4))\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[3]\n:x\n[1, 2, 3] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x2\n[1, 4, 9] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x3\n[1, 8, 27] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x4\n[1, 16, 81]]\n\n\n\n\none-hot\n[column]\n[column {:keys [values include-first], :or {values (distinct column), include-first false}}]\nGiven a column, create a vector of integer binary columns, each encoding the presence of absence of one of its values.\nE.g., if the column name is :x, and one of the values is :A, then a resulting binary column will have 1 in all the rows where column has :A.\nThe sequence of values to generate the binary columns is defined as follows: either the value provided for the :values key if present, or the distinct values in column in their order of appearance. If the value of the option key :include-first is false (which is the default), then the first value is ommitted. This is handy for avoiding multicollinearity in linear regression.\nSupported options: - :values - the values to encode as columns - default nil - :include-first - should the first value be included - default false\n\nExamples\n\n(tm/one-hot (tcc/column [:B :A :A :B :B :C]\n                        {:name :x}))\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:A\n[0, 1, 1, 0, 0, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:C\n[0, 0, 0, 0, 0, 1]]\n\n\n(tm/one-hot (tcc/column [:B :A :A :B :B :C]\n                        {:name :x})\n            {:values [:A :B :C]})\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:B\n[1, 0, 0, 1, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:C\n[0, 0, 0, 0, 0, 1]]\n\n\n(tm/one-hot (tcc/column [:B :A :A :B :B :C]\n                        {:name :x})\n            {:values [:A :B :C]\n             :include-first true})\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:A\n[0, 1, 1, 0, 0, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:B\n[1, 0, 0, 1, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:C\n[0, 0, 0, 0, 0, 1]]\n\n\n\n\nwith\n[m expr]\nEvaluate expression expr in the context of destructuring all the keys of map m.\n\nExamples\n\n(tm/with {:x 3 :y 9}\n         '(+ x y))\n\n\n12\n\n\n(tm/with (tc/dataset {:x (range 4)\n                      :y 9})\n         '(tcc/+ x y))\n\n\n#tech.v3.dataset.column&lt;int64&gt;[4]\nnull\n[9, 10, 11, 12]\n\n\n\n\ncolumns-with\n[dataset specs]\nCompute a sequence of named columns by a given sequence of specs in the context of a given dataset.\nEach spec is one of the following:\n\n\na keyword or string - in that case, we just take the corresponding column of the original dataset.\n\n\na vector of two elements [nam expr], where the first is a string or a keyword. In that case, nam is interpreted as a name or a name-prefix for the resulting columns, and expr is handled as an expression as in (3).\n\n\nany other Clojure form - in that case, we treat it as an expression, and evaluate it while destructuring the column names of dataset as well as all the columns created by previous specs; the evaluation is expected to return one of the following:\n\n\na column (or the data to create a column (e.g., a vector of numbers))\na sequential of columns\na map from column names to columns\n\n\nIn any case, the result of the spec is turned into a sequence of named columns, which is conctenated to the columns from the previous specs. Some default naming mechanisms are invoked if column names are missing.\nColumns of strings and keywords that have at most 20 distinct values are one-hot-encoded by default.\nEventually, the sequence of all resulting columns is returned.\n\nExamples\nNote the naming of the resulting columns, and note they can sequentially depend on each other.\n\n(tm/columns-with (tc/dataset {\"v\" [4 5 6]\n                              :w [:A :B :C]\n                              :x (range 3)\n                              :y (reverse (range 3))})\n                 [:v\n                  :w\n                  :x\n                  '(tcc/+ x y)\n                  [:z '(tcc/+ x y)]\n                  [:z1000 '(tcc/* z 1000)]\n                  '((juxt tcc/+ tcc/*) x y)\n                  [:p '((juxt tcc/+ tcc/*) x y)]\n                  '{:a (tcc/+ x y)\n                    :b (tcc/* x y)}\n                  [:p '{:a (tcc/+ x y)\n                        :b (tcc/* x y)}]\n                  '[(tcc/column (tcc/+ x y) {:name :c})\n                    (tcc/column (tcc/* x y) {:name :d})]\n                  [:p '[(tcc/column (tcc/+ x y) {:name :c})\n                        (tcc/column (tcc/* x y) {:name :d})]]])\n\n\n(#tech.v3.dataset.column&lt;int64&gt;[3]\n:w=:B\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:w=:C\n[0, 0, 1] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x\n[0, 1, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n(tcc/+ x y)\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:z\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:z1000\n[2000, 2000, 2000] #tech.v3.dataset.column&lt;int64&gt;[3]\n((juxt tcc/+ tcc/*) x y)_0\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n((juxt tcc/+ tcc/*) x y)_1\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:p_0\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:p_1\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:a\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:b\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pa\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pb\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:c\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:d\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pc\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pd\n[0, 1, 0])\n\n\n\n\ndesign\n[dataset target-specs feature-specs]\nGiven a dataset and sequences target-specs, feature-specs, generate a new dataset from the columns generated by columns-with from these two sequences. The columns from target-specs will be marked as targets for modelling (e.g., regression, classification).\n(Inspired by metamorph.ml.design-matrix but adapted for columnwise computation.)\n\nExamples\n\n(tm/design (tc/dataset {\"v\" [4 5 6]\n                        :w [:A :B :C]\n                        :x (range 3)\n                        :y (reverse (range 3))})\n           [:y]\n           [:v\n            :w\n            :x\n            '(tcc/+ x y)\n            [:z '(tcc/+ x y)]\n            [:z1000 '(tcc/* z 1000)]\n            '((juxt tcc/+ tcc/*) x y)\n            [:p '((juxt tcc/+ tcc/*) x y)]\n            '{:a (tcc/+ x y)\n              :b (tcc/* x y)}\n            [:p '{:a (tcc/+ x y)\n                  :b (tcc/* x y)}]\n            '[(tcc/column (tcc/+ x y) {:name :c})\n              (tcc/column (tcc/* x y) {:name :d})]\n            [:p '[(tcc/column (tcc/+ x y) {:name :c})\n                  (tcc/column (tcc/* x y) {:name :d})]]])\n\n\n_unnamed [3 19]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:y\n:w=:B\n:w=:C\n:x\n(tcc/+ x y)\n:z\n:z1000\n((juxt tcc/+ tcc/*) x y)_0\n((juxt tcc/+ tcc/*) x y)_1\n:p_0\n:p_1\n:a\n:b\n:pa\n:pb\n:c\n:d\n:pc\n:pd\n\n\n\n\n2\n0\n0\n0\n2\n2\n2000\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n\n\n1\n1\n0\n1\n2\n2\n2000\n2\n1\n2\n1\n2\n1\n2\n1\n2\n1\n2\n1\n\n\n0\n0\n1\n2\n2\n2\n2000\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n\n\n\n\n\n\n\nlm\n[dataset]\n[dataset options]\nCompute a linear regression model for dataset. The first column marked as target is the target. All the columns unmarked as target are the features. The resulting model is of type fastmath.ml.regression.LMData, a generated by Fastmath. It can be summarized by summary.\nSee fastmath.ml.regression.lm for options.\n\nExamples\n\nLinear relationship\n\n(def linear-toydata\n  (-&gt; {:x (range 9)}\n      tc/dataset\n      (tc/map-columns :y\n                      [:x]\n                      (fn [x]\n                        (+ (* 2 x)\n                           -3\n                           (* 3 (rand)))))))\n\n\n(-&gt; linear-toydata\n    plotly/layer-point)\n\n\nNote how the coefficients fit the way we generated the data:\n\n(-&gt; linear-toydata\n    (tm/design [:y]\n               [:x])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |  :median |      :q3 |     :max |\n|-----------+-----------+----------+----------+----------|\n| -1.065875 | -0.558432 | 0.158398 | 0.528058 | 0.669637 |\n\nCoefficients:\n\n|     :name | :estimate |  :stderr |  :t-value | :p-value | :confidence-interval |\n|-----------+-----------+----------+-----------+----------+----------------------|\n| Intercept | -0.546876 | 0.392459 |  -1.39346 | 0.206125 | [-1.474893 0.381142] |\n|        :x |  1.846629 | 0.082433 | 22.401628 |      0.0 |  [1.651706 2.041552] |\n\nF-statistic: 501.83291766778524 on degrees of freedom: {:residual 7, :model 1, :intercept 1}\np-value: 8.935090556327907E-8\n\nR2: 0.9862430283950885\nAdjusted R2: 0.984277746737244\nResidual standard error: 0.6385217752507847 on 7 degrees of freedom\nAIC: 21.204272737197513\n\n\n\n\nCubic relationship\n\n(def cubic-toydata\n  (-&gt; {:x (range 9)}\n      tc/dataset\n      (tc/map-columns :y\n                      [:x]\n                      (fn [x]\n                        (+ 50\n                           (* 4 x)\n                           (* -9 x x)\n                           (* x x x)\n                           (* 3 (rand)))))))\n\n\n(-&gt; cubic-toydata\n    plotly/layer-point)\n\n\nNote how the coefficients fit the way we generated the data:\n\n(-&gt; cubic-toydata\n    (tm/design [:y]\n               ['(tm/polynomial x 3)])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |   :median |      :q3 |     :max |\n|-----------+-----------+-----------+----------+----------|\n| -1.416885 | -0.361248 | -0.159624 | 0.421575 | 1.340384 |\n\nCoefficients:\n\n|     :name | :estimate |  :stderr |   :t-value | :p-value |   :confidence-interval |\n|-----------+-----------+----------+------------+----------+------------------------|\n| Intercept | 50.681655 | 0.891266 |  56.864814 |      0.0 |  [48.390584 52.972726] |\n|        :x |  5.152666 | 1.028649 |   5.009157 | 0.004073 |    [2.508439 7.796894] |\n|       :x2 | -9.293254 | 0.310576 | -29.922661 |   1.0E-6 | [-10.091615 -8.494894] |\n|       :x3 |  1.019036 | 0.025475 |  40.001202 |      0.0 |     [0.95355 1.084522] |\n\nF-statistic: 2962.49805122806 on degrees of freedom: {:residual 5, :model 3, :intercept 1}\np-value: 1.5268940778412343E-8\n\nR2: 0.9994377280531662\nAdjusted R2: 0.9991003648850659\nResidual standard error: 0.9618675995935431 on 5 degrees of freedom\nAIC: 29.551001186892037\n\n\n\n\nCategorical relationship\n\n(def days-of-week\n  [:Mon :Tue :Wed :Thu :Fri :Sat :Sun])\n\n\n(def categorical-toydata\n  (-&gt; {:t (range 18)\n       :day-of-week (-&gt;&gt; days-of-week\n                         (repeat 3)\n                         (apply concat))}\n      tc/dataset\n      (tc/map-columns :traffic\n                      [:day-of-week]\n                      (fn [dow]\n                        (+ (case dow\n                             :Sat 50\n                             :Sun 50\n                             60)\n                           (* 5 (rand)))))))\n\n\n(-&gt; categorical-toydata\n    (plotly/layer-point {:=x :t\n                         :=y :traffic\n                         :=color :day-of-week\n                         :=mark-size 10})\n    (plotly/layer-line {:=x :t\n                        :=y :traffic}))\n\n\nA model with all days except for one, dropping one category to avoid multicolinearity (note we begin with Thursday due to the order of appearance):\n\n(-&gt; categorical-toydata\n    (tm/design [:traffic]\n               ['(tm/one-hot day-of-week)])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |  :median |      :q3 |     :max |\n|-----------+-----------+----------+----------+----------|\n| -2.384111 | -0.945412 | 0.201007 | 1.030651 | 2.271914 |\n\nCoefficients:\n\n|             :name | :estimate |  :stderr |  :t-value | :p-value |   :confidence-interval |\n|-------------------+-----------+----------+-----------+----------+------------------------|\n|         Intercept | 61.515092 | 0.964584 | 63.773679 |      0.0 |  [59.392056 63.638128] |\n| :day-of-week=:Tue |  1.643425 | 1.364128 |  1.204744 | 0.253582 |   [-1.359001 4.645851] |\n| :day-of-week=:Wed |  0.208831 | 1.364128 |  0.153088 | 0.881101 |   [-2.793595 3.211257] |\n| :day-of-week=:Thu |  0.943699 | 1.364128 |  0.691796 | 0.503406 |   [-2.058728 3.946125] |\n| :day-of-week=:Fri |  1.181772 | 1.525142 |  0.774861 | 0.454756 |   [-2.175042 4.538587] |\n| :day-of-week=:Sat | -7.688267 | 1.525142 | -5.041018 |  3.77E-4 | [-11.045081 -4.331452] |\n| :day-of-week=:Sun | -9.537227 | 1.525142 | -6.253338 |   6.2E-5 | [-12.894041 -6.180412] |\n\nF-statistic: 16.87587496496225 on degrees of freedom: {:residual 11, :model 6, :intercept 1}\np-value: 5.799260079852875E-5\n\nR2: 0.9020090372557159\nAdjusted R2: 0.8485594212133791\nResidual standard error: 1.670709092712173 on 11 degrees of freedom\nAIC: 76.69414360164832\n\n\nA model with all days except for one, dropping one category to avoid multicolinearity, and speciftying the order of encoded values:\n\n(-&gt; categorical-toydata\n    (tm/design [:traffic]\n               ['(tm/one-hot day-of-week\n                             {:values days-of-week})])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |  :median |      :q3 |     :max |\n|-----------+-----------+----------+----------+----------|\n| -2.384111 | -0.945412 | 0.201007 | 1.030651 | 2.271914 |\n\nCoefficients:\n\n|             :name | :estimate |  :stderr |  :t-value | :p-value |   :confidence-interval |\n|-------------------+-----------+----------+-----------+----------+------------------------|\n|         Intercept | 61.515092 | 0.964584 | 63.773679 |      0.0 |  [59.392056 63.638128] |\n| :day-of-week=:Tue |  1.643425 | 1.364128 |  1.204744 | 0.253582 |   [-1.359001 4.645851] |\n| :day-of-week=:Wed |  0.208831 | 1.364128 |  0.153088 | 0.881101 |   [-2.793595 3.211257] |\n| :day-of-week=:Thu |  0.943699 | 1.364128 |  0.691796 | 0.503406 |   [-2.058728 3.946125] |\n| :day-of-week=:Fri |  1.181772 | 1.525142 |  0.774861 | 0.454756 |   [-2.175042 4.538587] |\n| :day-of-week=:Sat | -7.688267 | 1.525142 | -5.041018 |  3.77E-4 | [-11.045081 -4.331452] |\n| :day-of-week=:Sun | -9.537227 | 1.525142 | -6.253338 |   6.2E-5 | [-12.894041 -6.180412] |\n\nF-statistic: 16.87587496496225 on degrees of freedom: {:residual 11, :model 6, :intercept 1}\np-value: 5.799260079852875E-5\n\nR2: 0.9020090372557159\nAdjusted R2: 0.8485594212133791\nResidual standard error: 1.670709092712173 on 11 degrees of freedom\nAIC: 76.69414360164832\n\n\nA model with all days and no intercept, dropping the intercept to avoid multicolinearity and have an easier interpretation of the coefficients:\nNote how the coefficients fit the way we generated the data:\n\n(-&gt; categorical-toydata\n    (tm/design [:traffic]\n               ['(tm/one-hot day-of-week\n                             {:values days-of-week\n                              :include-first true})])\n    (tm/lm {:intercept? false})\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |  :median |      :q3 |     :max |\n|-----------+-----------+----------+----------+----------|\n| -2.384111 | -0.945412 | 0.201007 | 1.030651 | 2.271914 |\n\nCoefficients:\n\n|             :name | :estimate |  :stderr |  :t-value | :p-value |  :confidence-interval |\n|-------------------+-----------+----------+-----------+----------+-----------------------|\n| :day-of-week=:Mon | 61.515092 | 0.964584 | 63.773679 |      0.0 | [59.392056 63.638128] |\n| :day-of-week=:Tue | 63.158517 | 0.964584 | 65.477444 |      0.0 | [61.035481 65.281553] |\n| :day-of-week=:Wed | 61.723923 | 0.964584 | 63.990177 |      0.0 | [59.600887 63.846959] |\n| :day-of-week=:Thu |  62.45879 | 0.964584 | 64.752026 |      0.0 | [60.335755 64.581826] |\n| :day-of-week=:Fri | 62.696864 |  1.18137 | 53.071331 |      0.0 | [60.096687 65.297041] |\n| :day-of-week=:Sat | 53.826825 |  1.18137 | 45.563064 |      0.0 | [51.226648 56.427002] |\n| :day-of-week=:Sun | 51.977865 |  1.18137 | 43.997966 |      0.0 | [49.377688 54.578043] |\n\nF-statistic: 3352.9036264916203 on degrees of freedom: {:residual 11, :model 7, :intercept 0}\np-value: 0.0\n\nR2: 0.9995315426271968\nAdjusted R2: 0.9992334333899584\nResidual standard error: 1.6707090927121728 on 11 degrees of freedom\nAIC: 76.69414360164832\n\n\n\nsource: notebooks/tablemath_book/reference.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>Â  <span class='chapter-title'>API reference</span>"
    ]
  }
]