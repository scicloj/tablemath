[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tablemath",
    "section": "",
    "text": "1 Preface\nTablemath is a Clojure library for math and statistical modeling with table ergonomics, inspired by R.\nIt composes Tablecloth datasets with Fastmath modeling.\nstatus: Experimental. Things are expected to keep moving.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#chapters-in-this-book",
    "href": "index.html#chapters-in-this-book",
    "title": "Tablemath",
    "section": "1.1 Chapters in this book",
    "text": "1.1 Chapters in this book\n\nAPI reference\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "tablemath_book.reference.html",
    "href": "tablemath_book.reference.html",
    "title": "2  API reference",
    "section": "",
    "text": "2.1 Setup",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>API reference</span>"
    ]
  },
  {
    "objectID": "tablemath_book.reference.html#setup",
    "href": "tablemath_book.reference.html#setup",
    "title": "2  API reference",
    "section": "",
    "text": "(ns tablemath-book.reference\n  (:require [scicloj.tablemath.v1.api :as tm]\n            [tablecloth.api :as tc]\n            [tablecloth.column.api :as tcc]\n            [scicloj.tableplot.v1.plotly :as plotly]\n            [tablemath-book.utils :as utils]))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>API reference</span>"
    ]
  },
  {
    "objectID": "tablemath_book.reference.html#reference",
    "href": "tablemath_book.reference.html#reference",
    "title": "2  API reference",
    "section": "2.2 Reference",
    "text": "2.2 Reference\n\n2.2.1 with\n[m expr]\nEvaluate expression expr in the context of destructuring all the keys of map m.\n\n2.2.1.1 Examples\n\n(tm/with {:x 3 :y 9}\n         '(+ x y))\n\n\n12\n\n\n(tm/with (tc/dataset {:x (range 4)\n                      :y 9})\n         '(tcc/+ x y))\n\n\n#tech.v3.dataset.column&lt;int64&gt;[4]\nnull\n[9, 10, 11, 12]\n\n\n\n\n2.2.2 columns-with\n[dataset specs]\nCompute a sequence of named columns by a given sequence of specs in the context of a given dataset.\nEach spec is one of the following:\n\n\na keyword or string - in that case, we just take the corresponding column of the original dataset.\n\n\na vector of two elements [nam expr], where the first is a string or a keyword. In that case, nam is interpreted as a name or a name-prefix for the resulting columns, and expr is handled as an expression as in (3).\n\n\nany other Clojure form - in that case, we treat it as an expression, and evaluate it while destructuring the column names of dataset as well as all the columns created by previous specs; the evaluation is expected to return one of the following:\n\n\na column (or the data to create a column (e.g., a vector of numbers))\na sequential of columns\na map from column names to columns\n\n\nIn any case, the result of the spec is turned into a sequence of named columns, which is conctenated to the columns from the previous specs. Some default naming mechanisms are invoked if column names are missing.\nEventually, the sequence of all resulting columns is returned.\n\n2.2.2.1 Examples\nNote the naming of the resulting columns, and note they can sequentially depend on each other.\n\n(tm/columns-with (tc/dataset {\"w\" [:A :B :C]\n                              :x (range 3)\n                              :y (reverse (range 3))})\n                 [\"w\"\n                  :x\n                  '(tcc/+ x y)\n                  [:z '(tcc/+ x y)]\n                  [:z1000 '(tcc/* z 1000)]\n                  '((juxt tcc/+ tcc/*) x y)\n                  [:p '((juxt tcc/+ tcc/*) x y)]\n                  '{:a (tcc/+ x y)\n                    :b (tcc/* x y)}\n                  [:p '{:a (tcc/+ x y)\n                        :b (tcc/* x y)}]\n                  '[(tcc/column (tcc/+ x y) {:name :c})\n                    (tcc/column (tcc/* x y) {:name :d})]\n                  [:p '[(tcc/column (tcc/+ x y) {:name :c})\n                        (tcc/column (tcc/* x y) {:name :d})]]])\n\n\n(#tech.v3.dataset.column&lt;keyword&gt;[3]\nw\n[:A, :B, :C] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x\n[0, 1, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n(tcc/+ x y)\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:z\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:z1000\n[2000, 2000, 2000] #tech.v3.dataset.column&lt;int64&gt;[3]\n((juxt tcc/+ tcc/*) x y)_0\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n((juxt tcc/+ tcc/*) x y)_1\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:p_0\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:p_1\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:a\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:b\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pa\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pb\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:c\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:d\n[0, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pc\n[2, 2, 2] #tech.v3.dataset.column&lt;int64&gt;[3]\n:pd\n[0, 1, 0])\n\n\n\n\n2.2.3 design\n[dataset target-specs feature-specs]\nGiven a dataset and sequences target-specs, feature-specs, generate a new dataset from the columns generated by columns-with from these two sequences. The columns from target-specs will be marked as targets for modelling (e.g., regression, classification).\n(Inspired by metamorph.ml.design-matrix but adapted for columnwise computation.)\n\n2.2.3.1 Examples\n\n(tm/design (tc/dataset {\"w\" [:A :B :C]\n                        :x (range 3)\n                        :y (reverse (range 3))})\n           [:y]\n           [\"w\"\n            :x\n            '(tcc/+ x y)\n            [:z '(tcc/+ x y)]\n            [:z1000 '(tcc/* z 1000)]\n            '((juxt tcc/+ tcc/*) x y)\n            [:p '((juxt tcc/+ tcc/*) x y)]\n            '{:a (tcc/+ x y)\n              :b (tcc/* x y)}\n            [:p '{:a (tcc/+ x y)\n                  :b (tcc/* x y)}]\n            '[(tcc/column (tcc/+ x y)\n                          {:name :c})\n              (tcc/column (tcc/* x y)\n                          {:name :d})]\n            [:p '[(tcc/column (tcc/+ x y)\n                              {:name :c})\n                  (tcc/column (tcc/* x y)\n                              {:name :d})]]])\n\n\n_unnamed [3 18]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:y\nw\n:x\n(tcc/+ x y)\n:z\n:z1000\n((juxt tcc/+ tcc/*) x y)_0\n((juxt tcc/+ tcc/*) x y)_1\n:p_0\n:p_1\n:a\n:b\n:pa\n:pb\n:c\n:d\n:pc\n:pd\n\n\n\n\n2\n:A\n0\n2\n2\n2000\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n\n\n1\n:B\n1\n2\n2\n2000\n2\n1\n2\n1\n2\n1\n2\n1\n2\n1\n2\n1\n\n\n0\n:C\n2\n2\n2\n2000\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n2\n0\n\n\n\n\n\n\n\n2.2.4 polynomial\n[column degree]\nGiven a column and an integer degree, return a vector of columns with all its powers up to that degree, named appropriately.\n\n2.2.4.1 Examples\n\n(-&gt; [1 2 3]\n    (tcc/column {:name :x})\n    (tm/polynomial 4))\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[3]\n:x\n[1, 2, 3] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x2\n[1, 4, 9] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x3\n[1, 8, 27] #tech.v3.dataset.column&lt;int64&gt;[3]\n:x4\n[1, 16, 81]]\n\n\n\n\n2.2.5 one-hot\n[column]\n[column {:keys [values include-last], :or {values (distinct column), include-last false}}]\nGiven a column, create a vector of integer binary columns, each encoding the presence of absence of one of its values.\nE.g., if the column name is :x, and one of the values is :A, then a resulting binary column will have 1 in all the rows where column has :A.\nThe sequence of values to generate the binary columns is defined as follows: either the value provided for the :values key if present, or the distinct values in column in their order of appearance. If the value of the option key :include-last is false (which is the default), then the last value is ommitted. This is handy for avoiding multicollinearity in linear regression.\nSupported options: - :values - the values to encode as columns - default nil - :include-last - should the last value be included - default false\n\n2.2.5.1 Examples\n\n(tm/one-hot (tcc/column [:B :A :A :B :B :C]\n                        {:name :x}))\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:B\n[1, 0, 0, 1, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:A\n[0, 1, 1, 0, 0, 0]]\n\n\n(tm/one-hot (tcc/column [:B :A :A :B :B :C]\n                        {:name :x})\n            {:values [:A :B :C]})\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:A\n[0, 1, 1, 0, 0, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:B\n[1, 0, 0, 1, 1, 0]]\n\n\n(tm/one-hot (tcc/column [:B :A :A :B :B :C]\n                        {:name :x})\n            {:values [:A :B :C]\n             :include-last true})\n\n\n[#tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:A\n[0, 1, 1, 0, 0, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:B\n[1, 0, 0, 1, 1, 0] #tech.v3.dataset.column&lt;int64&gt;[6]\n:x=:C\n[0, 0, 0, 0, 0, 1]]\n\n\n\n\n2.2.6 lm\n[dataset]\n[dataset options]\nCompute a linear regression model for dataset. The first column marked as target is the target. All the columns unmarked as target are the features. The resulting model is of type fastmath.ml.regression.LMData, a generated by Fastmath. It can be summarized by summary.\nSee fastmath.ml.regression.lm for options.\n\n2.2.6.1 Examples:\n\n2.2.6.1.1 Linear relationship\n\n(def linear-toydata\n  (-&gt; {:x (range 9)}\n      tc/dataset\n      (tc/map-columns :y\n                      [:x]\n                      (fn [x]\n                        (+ (* 2 x)\n                           -3\n                           (* 3 (rand)))))))\n\n\n(-&gt; linear-toydata\n    plotly/layer-point)\n\n\nNote how the coefficients fit the way we generated the data:\n\n(-&gt; linear-toydata\n    (tm/design [:y]\n               [:x])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |  :median |      :q3 |     :max |\n|-----------+-----------+----------+----------+----------|\n| -1.200713 | -0.744596 | 0.006231 | 0.984176 | 1.095649 |\n\nCoefficients:\n\n|     :name | :estimate |  :stderr |  :t-value | :p-value |  :confidence-interval |\n|-----------+-----------+----------+-----------+----------+-----------------------|\n| Intercept | -1.435742 | 0.562215 | -2.553725 | 0.037897 | [-2.765169 -0.106315] |\n|        :x |  2.048763 | 0.118089 | 17.349349 |   1.0E-6 |   [1.769527 2.327998] |\n\nF-statistic: 300.9999192401573 on degrees of freedom: {:residual 7, :model 1, :intercept 1}\np-value: 5.196651776673278E-7\n\nR2: 0.9772727213134693\nAdjusted R2: 0.9740259672153935\nResidual standard error: 0.9147114746122321 on 7 degrees of freedom\nAIC: 27.67442509209375\n\n\n\n\n2.2.6.1.2 Cubic relationship\n\n(def cubic-toydata\n  (-&gt; {:x (range 9)}\n      tc/dataset\n      (tc/map-columns :y\n                      [:x]\n                      (fn [x]\n                        (+ 50\n                           (* 4 x)\n                           (* -9 x x)\n                           (* x x x)\n                           (* 10 (rand)))))))\n\n\n(-&gt; cubic-toydata\n    plotly/layer-point)\n\n\nNote how the coefficients fit the way we generated the data:\n\n(-&gt; cubic-toydata\n    (tm/design [:y]\n               ['(tm/polynomial x 3)])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |  :median |     :q3 |    :max |\n|-----------+-----------+----------+---------+---------|\n| -4.665347 | -2.371591 | 0.939768 | 2.03242 | 2.53654 |\n\nCoefficients:\n\n|     :name | :estimate |  :stderr |  :t-value | :p-value |   :confidence-interval |\n|-----------+-----------+----------+-----------+----------+------------------------|\n| Intercept | 57.830619 | 3.052193 | 18.947233 |   8.0E-6 |  [49.984706 65.676532] |\n|        :x |  3.054811 | 3.522672 |  0.867186 | 0.425492 |  [-6.000506 12.110128] |\n|       :x2 | -8.861813 | 1.063586 | -8.332016 |  4.07E-4 | [-11.595847 -6.127779] |\n|       :x3 |  0.999059 | 0.087241 |  11.45169 |   8.9E-5 |    [0.774798 1.223319] |\n\nF-statistic: 257.0467029064518 on degrees of freedom: {:residual 5, :model 3, :intercept 1}\np-value: 6.7702261611346515E-6\n\nR2: 0.9935578641744851\nAdjusted R2: 0.9896925826791761\nResidual standard error: 3.2939740310969015 on 5 degrees of freedom\nAIC: 51.708519078029425\n\n\n\n\n2.2.6.1.3 Categorical relationship\n\n(def days-of-week\n  [:Mon :Tue :Wed :Thu :Fri :Sat :Sun])\n\n\n(def categorical-toydata\n  (-&gt; {:t (range 21)\n       :day-of-week (-&gt;&gt; days-of-week\n                         (repeat 3)\n                         (apply concat)\n                         (drop 3))}\n      tc/dataset\n      (tc/map-columns :traffic\n                      [:day-of-week]\n                      (fn [dow]\n                        (+ (case dow\n                             :Sat 50\n                             :Sun 50\n                             60)\n                           (* 5 (rand)))))))\n\n\n(-&gt; categorical-toydata\n    (plotly/layer-point {:=x :t\n                         :=y :traffic\n                         :=color :day-of-week\n                         :=mark-size 10})\n    (plotly/layer-line {:=x :t\n                        :=y :traffic}))\n\n\nA model with all days except for one, dropping one category to avoid multicolinearity (note we begin with Thursday due to the order of appearance):\n\n(-&gt; categorical-toydata\n    (tm/design [:traffic]\n               ['(tm/one-hot day-of-week)])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |   :median |      :q3 |     :max |\n|-----------+-----------+-----------+----------+----------|\n| -1.384697 | -0.571451 | -0.081105 | 0.612244 | 1.461751 |\n\nCoefficients:\n\n|             :name | :estimate |  :stderr |   :t-value | :p-value |   :confidence-interval |\n|-------------------+-----------+----------+------------+----------+------------------------|\n|         Intercept | 61.697899 | 0.589739 | 104.619059 |      0.0 |  [60.423846 62.971952] |\n| :day-of-week=:Thu |  1.809323 | 0.834016 |    2.16941 |  0.04918 |    [0.007541 3.611106] |\n| :day-of-week=:Fri |  2.238035 | 0.834016 |   2.683442 | 0.018777 |    [0.436252 4.039818] |\n| :day-of-week=:Sat |  -9.79261 | 0.834016 | -11.741509 |      0.0 | [-11.594393 -7.990828] |\n| :day-of-week=:Sun | -8.002388 | 0.834016 |  -9.595002 |      0.0 |  [-9.804171 -6.200606] |\n| :day-of-week=:Mon |  1.854568 | 0.932459 |   1.988901 | 0.068181 |   [-0.159886 3.869022] |\n| :day-of-week=:Tue |  1.667249 | 0.932459 |   1.788013 | 0.097093 |   [-0.347206 3.681703] |\n| :day-of-week=:Wed |   -0.4298 | 0.932459 |  -0.460932 | 0.652464 |   [-2.444254 1.584655] |\n\nF-statistic: 62.83532494050739 on degrees of freedom: {:residual 13, :model 7, :intercept 1}\np-value: 5.195825547588129E-9\n\nR2: 0.9712927498306022\nAdjusted R2: 0.955834999739388\nResidual standard error: 1.0214572481651054 on 13 degrees of freedom\nAIC: 68.41605556919023\n\n\nA model with all days except for one, dropping one category to avoid multicolinearity, and speciftying the order of encoded values:\n\n(-&gt; categorical-toydata\n    (tm/design [:traffic]\n               ['(tm/one-hot day-of-week\n                             {:values days-of-week})])\n    tm/lm\n    tm/summary)\n\n\nResiduals:\n\n|      :min |       :q1 |   :median |      :q3 |     :max |\n|-----------+-----------+-----------+----------+----------|\n| -5.225682 | -1.051923 | -0.081105 | 1.052818 | 5.144096 |\n\nCoefficients:\n\n|             :name | :estimate |  :stderr |  :t-value | :p-value |   :confidence-interval |\n|-------------------+-----------+----------+-----------+----------+------------------------|\n|         Intercept | 57.696705 | 1.142372 | 50.506046 |      0.0 |    [55.24656 60.14685] |\n| :day-of-week=:Mon |  5.855762 | 2.284744 |  2.562983 | 0.022542 |   [0.955473 10.756052] |\n| :day-of-week=:Tue |  5.668443 | 2.284744 |  2.480996 | 0.026418 |   [0.768153 10.568732] |\n| :day-of-week=:Wed |  3.571394 | 2.284744 |  1.563148 | 0.140334 |   [-1.328895 8.471684] |\n| :day-of-week=:Thu |  5.810518 | 1.978647 |  2.936612 | 0.010829 |   [1.566742 10.054293] |\n| :day-of-week=:Fri |  6.239229 | 1.978647 |  3.153281 | 0.007046 |   [1.995454 10.483004] |\n| :day-of-week=:Sat | -5.791416 | 1.978647 | -2.926958 | 0.011038 | [-10.035191 -1.547641] |\n\nF-statistic: 7.7238038001312175 on degrees of freedom: {:residual 14, :model 6, :intercept 1}\np-value: 8.282772097132352E-4\n\nR2: 0.7679922922031858\nAdjusted R2: 0.6685604174331226\nResidual standard error: 2.7982290599470065 on 14 degrees of freedom\nAIC: 110.29809414098222\n\n\nA model with all days and no intercept, dropping the intercept to avoid multicolinearity and have an easier interpretation of the coefficients:\nNote how the coefficients fit the way we generated the data:\n\n(-&gt; categorical-toydata\n    (tm/design [:traffic]\n               ['(tm/one-hot day-of-week\n                             {:values days-of-week\n                              :include-last true})])\n    (tm/lm {:intercept? false})\n    tm/summary)\n\n\nResiduals:\n\n|      :min |      :q1 |  :median |      :q3 |      :max |\n|-----------+----------+----------+----------+-----------|\n| -1.384697 | -0.36844 | 0.315601 | 1.052818 | 62.840801 |\n\nCoefficients:\n\n|             :name | :estimate |   :stderr | :t-value | :p-value |   :confidence-interval |\n|-------------------+-----------+-----------+----------+----------+------------------------|\n| :day-of-week=:Mon | 63.552467 | 20.207368 | 3.145015 | 0.007162 | [20.211973 106.892961] |\n| :day-of-week=:Tue | 63.365148 | 20.207368 | 3.135745 | 0.007295 | [20.024654 106.705641] |\n| :day-of-week=:Wed | 61.268099 | 20.207368 | 3.031968 | 0.008965 | [17.927605 104.608593] |\n| :day-of-week=:Thu | 63.507223 | 16.499247 | 3.849098 | 0.001771 |  [28.119858 98.894587] |\n| :day-of-week=:Fri | 63.935934 | 16.499247 | 3.875082 | 0.001682 |  [28.548569 99.323299] |\n| :day-of-week=:Sat | 51.905289 | 16.499247 | 3.145919 | 0.007149 |  [16.517924 87.292654] |\n| :day-of-week=:Sun | 53.695511 | 16.499247 | 3.254422 | 0.005762 |  [18.308146 89.082876] |\n\nF-statistic: 11.319532559592306 on degrees of freedom: {:residual 14, :model 7, :intercept 0}\np-value: 8.193716034810006E-5\n\nR2: 0.8498445804271364\nAdjusted R2: 0.7747668706407046\nResidual standard error: 28.577533781387242 on 14 degrees of freedom\nAIC: 207.89072795893196\n\n\n\nsource: notebooks/tablemath_book/reference.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>API reference</span>"
    ]
  }
]